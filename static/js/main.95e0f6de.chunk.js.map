{"version":3,"sources":["components/Card.jsx","utils/capitalize.js","components/GameBoard.jsx","components/Instructions.jsx","components/Score.jsx","components/Title.jsx","components/Header.jsx","utils/randomize.js","utils/shuffleArray.js","components/ShowMessage.jsx","App.js","index.js"],"names":["Card","str","pokemon","handleClick","name","image","onClick","className","id","src","alt","split","toUpperCase","slice","GameBoard","cardOrder","map","idx","data","Instructions","Score","score","highScore","level","Title","Header","randomize","usedIndexes","num","array","i","Math","floor","random","includes","push","console","log","shuffleArray","length","j","ShowMessage","message","App","useRef","useState","setScore","setHighScore","previouslyClickedCard","setPreviouslyClickedCard","setLevel","setCardOrder","showLevelUpMessage","setShowLevelUpMessage","showGameOverMessage","setShowGameOverMessage","useEffect","setTimeout","checkIfLevelup","e","clickedCard","currentTarget","card","hasBeenClicked","forEach","cardInClickedCard","hasCardBeenClicked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95e0f6de.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/card.css';\nimport capitalize from '../utils/capitalize';\n\nexport default function Card({ pokemon, handleClick }) {\n  const { name, image } = pokemon;\n\n  return (\n    <div onClick={handleClick} className='pokemon-card' id={pokemon.name}>\n      <img className='pokemon-image' src={image} alt={name} />\n      <h3 className='pokemon-name'>{capitalize(name)}</h3>\n    </div>\n  );\n}\n","export default function capitalize(str) {\n  const strArr = str.split('');\n  return strArr[0].toUpperCase() + str.slice(1);\n}\n","import React from 'react';\nimport data from '../data.json';\nimport Card from './Card';\nimport '../styles/gameBoard.css';\n\nexport default function GameBoard({ handleClick, cardOrder }) {\n  return (\n    <div className='gameboard'>\n      {cardOrder.map((idx) => {\n        return (\n          <Card\n            pokemon={data[idx]}\n            key={data[idx].name}\n            handleClick={handleClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nexport default function Instructions() {\n  return (\n    <p>\n      Click on the Pokemons but be sure not to click a specific Pokemon more han\n      once. The more unique Pokemon you click in row, the higher your score!\n      Keep clicking!\n    </p>\n  );\n}\n","import React from 'react';\n\nexport default function Score({ score, highScore, level }) {\n  return (\n    <div className='score'>\n      <h2>Current Score: {score} </h2>\n      <h2>High Score: {highScore} </h2>\n      <h2>Level: {level} </h2>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Title() {\n  return (\n    <div>\n      <h1>Memory Card - The Game</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport Instructions from './Instructions';\nimport Score from './Score';\nimport Title from './Title';\n\nexport default function Header({ score, highScore, level }) {\n  return (\n    <div className='header'>\n      <Title />\n      <Instructions />\n      <Score score={score} highScore={highScore} level={level} />\n    </div>\n  );\n}\n","export default function randomize(usedIndexes, num) {\n  let array = usedIndexes;\n\n  for (let i = 0; i < num; ) {\n    let num = Math.floor(Math.random() * 150);\n    if (!array.includes(num)) {\n      array.push(num);\n      i++;\n    } else {\n      num = Math.floor(Math.random() * 150);\n    }\n  }\n  console.log('input: ', usedIndexes, 'output ', array);\n  return array;\n}\n","export default function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n//Found at https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n","import React from 'react';\nimport '../styles/showMessage.css';\n\nexport default function ShowMessage({ level, message }) {\n  return (\n    <div className='message'>\n      <h2>{message}</h2>\n      {level > 1 ? <h3>LVL {level}</h3> : null}\n    </div>\n  );\n}\n","import GameBoard from './components/GameBoard';\nimport Header from './components/Header';\nimport React, { useState, useEffect, useRef } from 'react';\nimport randomize from './utils/randomize';\nimport shuffleArray from './utils/shuffleArray';\nimport ShowMessage from './components/ShowMessage';\nimport './styles/app.css';\n\nfunction App() {\n  const firstLoad = useRef(true);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [previouslyClickedCard, setPreviouslyClickedCard] = useState([]);\n  const [level, setLevel] = useState(1);\n  const [cardOrder, setCardOrder] = useState(() => randomize([], 4));\n  const [showLevelUpMessage, setShowLevelUpMessage] = useState(false);\n  const [showGameOverMessage, setShowGameOverMessage] = useState(false);\n\n  useEffect(() => {\n    //check if to level up\n    checkIfLevelup();\n    if (score > highScore) {\n      setHighScore(score);\n    }\n  }, [score]);\n\n  //show level up message\n  // useEffect(() => {\n  //   if (!firstLoad.current) {\n  //     setShowLevelUpMessage(true);\n  //     setTimeout(() => {\n  //       setShowLevelUpMessage(false);\n  //     }, 1000);\n  //   } else {\n  //     firstLoad.current = false;\n  //   }\n  // }, [level]);\n\n  // //initialize card order\n  // useEffect(() => {\n\n  //   console.log('randomshit', randomArray.usedIndexes);\n  //   setCardOrder(() => randomArray.usedIndexes);\n  //   console.log('the card order state: ', cardOrder);\n  // }, []);\n\n  console.log('cardorder', cardOrder);\n\n  function hasCardBeenClicked(card) {\n    let hasBeenClicked = false;\n    previouslyClickedCard.forEach((cardInClickedCard) => {\n      if (cardInClickedCard === card) {\n        hasBeenClicked = true;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return hasBeenClicked;\n  }\n  function checkIfLevelup() {\n    if (score >= level * 4) {\n      setLevel((level) => level + 1);\n      setCardOrder(shuffleArray(randomize(cardOrder, 4)));\n      setShowLevelUpMessage(true);\n      setTimeout(() => {\n        setShowLevelUpMessage(false);\n      }, 1000);\n      return true;\n    }\n  }\n\n  function handleLevelUp() {\n    //craete looop\n    //for every new level add 4 new cards using randomize function\n  }\n\n  function handleClick(e) {\n    const clickedCard = e.currentTarget.id;\n    //check if clicked card was previously clicked\n    if (hasCardBeenClicked(clickedCard)) {\n      setScore(0);\n      setPreviouslyClickedCard([]);\n      setCardOrder(randomize([], 4));\n      setLevel(1);\n      setShowGameOverMessage(true);\n      setTimeout(() => {\n        setShowGameOverMessage(false);\n      }, 1500);\n      return;\n    }\n    //increase score & push card to clicked card array\n    setScore((score) => score + 1);\n    setPreviouslyClickedCard([...previouslyClickedCard, clickedCard]);\n\n    //use randomize to set random position\n    setCardOrder(shuffleArray([...cardOrder]));\n  }\n\n  return (\n    <div className='App'>\n      <Header score={score} highScore={highScore} level={level} />\n      <GameBoard handleClick={handleClick} cardOrder={cardOrder} />\n      {showLevelUpMessage ? (\n        <ShowMessage level={level} message='Level Up!' />\n      ) : showGameOverMessage ? (\n        <ShowMessage message='Game Over' />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}